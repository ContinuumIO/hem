// Generated by CoffeeScript 1.4.0
(function() {
  var Dependency, Package, Stitch, compilers, eco, fs, individual, pathlib, stitch, stitchindividual, toArray, uglify, _;

  fs = require('fs');

  pathlib = require('path');

  eco = require('eco');

  uglify = require('uglify-js');

  compilers = require('./compilers');

  _ = require('underscore');

  Dependency = require('./dependency');

  Stitch = require('./stitch');

  toArray = require('./utils').toArray;

  stitch = require('../assets/stitch');

  individual = require('../assets/individual');

  stitchindividual = require('../assets/stitchindividual');

  Package = (function() {

    function Package(config) {
      if (config == null) {
        config = {};
      }
      this.identifier = config.identifier;
      this.libs = toArray(config.libs || []);
      this.paths = toArray(config.paths || []);
      this.dependencies = toArray(config.dependencies || []);
      this.target_dir = config.target_dir;
      this.target_file = config.target_file;
      this.extrajs_file = '_extra.js';
      this.targets_file = 'targets.json';
      this.extraJS = config.extraJS || "";
      this.test = config.test;
      this.uglify = config.uglify;
      this.split = config.split;
    }

    Package.prototype.write_package_single = function() {
      var source, target;
      source = this.compile_single();
      target = pathlib.join(this.target_dir, this.target_file);
      console.log(target);
      fs.writeFileSync(target, source);
      return fs.writeFileSync(pathlib.join(this.target_dir, this.targets_file), JSON.stringify([target]));
    };

    Package.prototype.write_package_split = function() {
      var fname, fnames, result, source, sources, _i, _len, _ref,
        _this = this;
      sources = this.compile_split();
      fnames = _.map(this.modules, function(module) {
        return module.id.split("/").join("_") + ".js";
      });
      fnames.push(this.target_file);
      _ref = _.zip(fnames, sources.modules);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        fname = result[0], source = result[1];
        fs.writeFileSync(pathlib.join(this.target_dir, fname), source);
      }
      fs.writeFileSync(pathlib.join(this.target_dir, this.extrajs_file), sources.extraJS);
      fnames.push(this.extrajs_file);
      fnames = _.map(fnames, function(fname) {
        return pathlib.join(_this.target_dir, fname);
      });
      fnames = fnames.concat(this.libs);
      return fs.writeFileSync(pathlib.join(this.target_dir, this.targets_file), JSON.stringify(fnames));
    };

    Package.prototype.write_package = function() {
      if (this.split) {
        return this.write_package_split();
      } else {
        return this.write_package_single();
      }
    };

    Package.prototype.compileModules = function(split) {
      var m, result, _i, _len, _ref;
      this.dependency || (this.dependency = new Dependency(this.dependencies));
      this.stitch = new Stitch(this.paths);
      this.modules = this.dependency.resolve().concat(this.stitch.resolve());
      if (!split) {
        return stitch({
          identifier: this.identifier,
          modules: this.modules
        });
      } else {
        result = [];
        _ref = this.modules;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          result.push(individual({
            m: m
          }));
        }
        result.push(stitchindividual({
          identifier: this.identifier
        }));
        return result;
      }
    };

    Package.prototype.compileLibs = function() {
      var path;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.libs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          _results.push(fs.readFileSync(path, 'utf8'));
        }
        return _results;
      }).call(this)).join("\n");
    };

    Package.prototype.compile_single = function() {
      var result;
      try {
        result = [this.compileLibs(), this.compileModules(), this.extraJS].join("\n");
        if (this.uglify) {
          result = uglify(result);
        }
        return result;
      } catch (ex) {
        if (ex.stack) {
          console.error(ex);
        } else {
          console.trace(ex);
        }
        return result = "console.log(\"" + ex + "\");";
      }
    };

    Package.prototype.compile_split = function() {
      var result;
      try {
        result = {
          libs: null,
          modules: this.compileModules(true),
          extra: this.extraJS
        };
        return result;
      } catch (ex) {
        if (ex.stack) {
          console.error(ex);
        } else {
          console.trace(ex);
        }
        return result = "console.log(\"" + ex + "\");";
      }
    };

    Package.prototype.unlink = function() {
      if (fs.existsSync(this.target)) {
        return fs.unlinkSync(this.target);
      }
    };

    Package.prototype.createServer = function() {
      var _this = this;
      return function(env, callback) {
        return callback(200, {
          'Content-Type': 'text/javascript'
        }, _this.compile_single());
      };
    };

    return Package;

  })();

  module.exports = {
    compilers: compilers,
    Package: Package,
    createPackage: function(config) {
      return new Package(config);
    }
  };

}).call(this);
